!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
PTHREAD_THREADS_MAX	iflood/main.c	19;"	d	file:
c_process	iflood/worker.c	/^c_process(char *ip, char *port, char *file, int link_num, int link_mode)$/;"	f
cs_mode	iflood/main.c	/^static int cs_mode;$/;"	v	file:
false	iflood/system.h	47;"	d
foo	iflood/worker.c	/^foo(void*)$/;"	f
inet_atoul	iflood/socket.c	/^inet_atoul(const char * s)$/;"	f
inet_ultoa	iflood/socket.c	/^inet_ultoa(unsigned int u, char * s)$/;"	f
l_opt_arg	iflood/main.c	/^char *l_opt_arg;$/;"	v
link_mode	iflood/main.c	/^static int link_mode;$/;"	v	file:
link_num	iflood/main.c	/^int link_num = 0;$/;"	v
long_options	iflood/main.c	/^struct option long_options[] =$/;"	v	typeref:struct:option
main	iflood/main.c	/^int main(int argc, char *argv[])      $/;"	f
make_subdir	Makefile	/^define make_subdir$/;"	m
make_subdir_clean	Makefile	/^define make_subdir_clean$/;"	m
max_thread	iflood/worker.c	/^max_thread()$/;"	f
n_child	iflood/worker.c	/^static int n_child = 1;$/;"	v	file:
noblock_accept	iflood/socket.c	/^int noblock_accept(int fd, struct sockaddr* paddr, int addrlen, const int time_out)$/;"	f
s_child_server	iflood/worker.c	/^s_child_server(int c_fd)$/;"	f
s_inet_aton	iflood/socket.c	/^s_inet_aton(char *buf, struct in_addr *a)$/;"	f
s_net_accept	iflood/socket.c	/^int s_net_accept(int s_sock, struct sockaddr* s)$/;"	f
s_net_accept	iflood/socket.c	/^s_net_accept(int l_sock, struct sockaddr_in *c_addr)$/;"	f
s_net_bind	iflood/socket.c	/^int s_net_bind(int s_sock, struct sockaddr_in *s_net_addr) $/;"	f
s_net_connect	iflood/socket.c	/^s_net_connect(int s_sock, struct sockaddr_in *s_net_addr)$/;"	f
s_net_init	iflood/socket.c	/^s_net_init(struct sockaddr_in *s_net_addr, char *s_ip, char *s_port)$/;"	f
s_net_listen	iflood/socket.c	/^int s_net_listen(int s_sock)$/;"	f
s_net_ntoa	iflood/socket.c	/^s_net_ntoa(char *buf, size_t bufsize, struct in_addr a)$/;"	f
s_net_recv	iflood/socket.c	/^s_net_recv(int s_sock, char *r_buf, int len)$/;"	f
s_net_send	iflood/socket.c	/^s_net_send(int s_sock, char *s_buf, int len)$/;"	f
s_net_set_tout	iflood/socket.c	/^s_net_set_tout(int s_sock)$/;"	f
s_process	iflood/worker.c	/^s_process(char *ip, char *port)$/;"	f
s_set_nonblock	iflood/socket.c	/^s_set_nonblock(int s_sock)$/;"	f
short_options	iflood/main.c	/^char *const short_options = "p:i:f:csl:hm:";$/;"	v
socket_INCLUDE	iflood/socket.h	16;"	d
src	iflood/Makefile	/^src:=epoll.c socket.c worker.c$/;"	m
subdirs	Makefile	/^subdirs := $(basename $(patsubst .\/%, %, $(subdirs)))$/;"	m
subdirs	Makefile	/^subdirs := $(shell find . -maxdepth 2 -type d)$/;"	m
system_INCLUDE	iflood/system.h	15;"	d
target	iflood/Makefile	/^target:=iflood$/;"	m
top_srcs	Makefile	/^top_srcs=$/;"	m
true	iflood/system.h	46;"	d
usage	iflood/main.c	/^void usage(int argc, char *argv[])$/;"	f
w_mission_start	iflood/worker.c	/^w_mission_start(char *ip, char *port, char *t_buf, int n_read)$/;"	f
w_read_file_to_buf	iflood/worker.c	/^w_read_file_to_buf(char *file, char *t_buf)$/;"	f
w_short_mission_start	iflood/worker.c	/^w_short_mission_start(char *ip, char *port, char *t_buf, int n_read)$/;"	f
