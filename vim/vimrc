" Begin /etc/vimrc

" Vim UI {
	set hlsearch "sreach high light
    set nocompatible
    set backspace=2
    syntax on
    set background=dark
    set ruler
    set number " turn on line numbers
    set cin " Function automatically fill the whole
"   met numberwidth=5 " We are good up to 99999 lines
"   set fileencodings=utf-8,gb2312,gbk,gb18030
"   set termencoding=utf-8
"   set encoding=prc
" }

" Text Formatting/Layout {
"  set completeopt=menu,longest " improve the way autocomplete works
   set noexpandtab " no real tabs please! Do not have spaces instead of.
   set formatoptions=rq " Automatically insert comment leader on return, and let gq work
   set ignorecase " case insensitive by default
   " set nowrap " do not wrap line
   set shiftround " when at 3 spaces, and I hit > ... go to 4, not 5
   set smartcase " if there are caps, go case-sensitive
   " Indent Related {
      set shiftwidth=4 " unify
      set softtabstop=4 " unify
      set tabstop=4 " real tabs should be 4, but they will show with set list on
   " }
" }

" Folding {
   set foldenable " Turn on folding
   set foldmarker={,} " Fold C style code (useful with high foldlevel)
   set foldmethod=marker " Fold on the marker
   set foldlevel=100 " Don't autofold anything (but I can still fold manually)
   set foldopen=block,hor,mark,percent,quickfix,tag " what movements to open folds on
"   function SimpleFoldText() " {
"      return getline(v:foldstart).' '
"   endfunction " }
"   set foldtext=SimpleFoldText() " Custom fold text function (cleaner than default)
"   set autochdir " always switch to the current directory of the file you are editing
" }

" Plugin Settings {
   let b:match_ignorecase = 1 " case is stupid
   let perl_extended_vars=1 " highlight advanced perl vars inside strings

   let Tlist_Ctags_cmd='/usr/bin/ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q'
   let Tlist_Show_One_File=1
   let Tlist_OnlyWindow=1
   let Tlist_Use_Right_Window=1
   let Tlist_Sort_Type='name'
   let Tlist_Exit_OnlyWindow=1
   let Tlist_Show_Menu=1
   let Tlist_Max_Submenu_Items=10
   let Tlist_Max_Tag_length=20
   let Tlist_Use_SingleClick=0
   let Tlist_Auto_Open=0
   let Tlist_Close_On_Select=0
   let Tlist_File_Fold_Auto_Close=1
   let Tlist_GainFocus_On_ToggleOpen=0
   let Tlist_Process_File_Always=1
   let Tlist_WinHeight=10
   let Tlist_WinWidth=40
   let Tlist_Use_Horiz_Window=0

   " NERDTree
   let NERDTreeWinSize=20
   let NERDTreeWinPos="left"

   " Langauge Specifics {
   let tlist_aspjscript_settings = 'asp;f:function;c:class' " functions/classes
   let tlist_aspvbs_settings = 'asp;f:function;s:sub' " functions/subs
   let tlist_php_settings = 'php;c:class;d:constant;f:function' " no variables
   let tlist_vb_settings = 'asp;f:function;c:class' " functions/classes
   " }
" }

"ctags -R and set tags
set tags+=tags,../tags;  
"set autochdir  

" Mappings {
   map <F12> ggVGg?
   noremap <S-space> <C-b>
   noremap <space> <C-f>

   " Make Arrow Keys Useful {
      map <down> <ESC>:bn<RETURN> 
      map <left> <ESC>:NERDTreeToggle<RETURN>
      map <right> <ESC>:Tlist<RETURN>
      map <up> <ESC>:bp<RETURN>
   " }
" }

" Autocommands {
   au BufRead,BufNewFile *.rb,*.rhtml set shiftwidth=2 " ruby standard 2 spaces, always
" Autocommands {
   au BufRead,BufNewFile *.rb,*.rhtml set shiftwidth=2 " ruby standard 2 spaces, always
   au BufRead,BufNewFile *.rb,*.rhtml set softtabstop=4 " ...
   au BufRead,BufNewFile *.rb,*.rhtml set tabstop=4 " ...
   " Notes {
      " I consider .notes files special, and handle them differently
      au BufRead,BufNewFile *.notes set foldlevel=1
      au BufRead,BufNewFile *.notes set foldmethod=indent
      au BufRead,BufNewFile *.notes set foldtext=foldtext()
      au BufRead,BufNewFile *.notes set listchars=tab:\ \ 
      au BufRead,BufNewFile *.notes set noexpandtab
      au BufRead,BufNewFile *.notes set shiftwidth=1
      au BufRead,BufNewFile *.notes set softtabstop=1
      au BufRead,BufNewFile *.notes set syntax=notes
      au BufRead,BufNewFile *.notes set tabstop=1
   " }
" }

" Open the file back to the last open
if has("autocmd")
autocmd BufRead *.txt set tw=78
autocmd BufReadPost *
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\   exe "normal g'\"" |
\ endif
endif

map <F6> i{<Esc>ea}<Esc>
map <F5> :make<cr>

let g:SuperTabRetainCompletionType=2
let g:SuperTabDefaultCompletionType=""

function! CleverTab()
	if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
		return "\<Tab>"
	else
		return "\<C-N>"
	endif
		endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>



