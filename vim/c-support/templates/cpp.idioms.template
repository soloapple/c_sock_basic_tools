== Idioms.function == map:if, shortcut:f  ==
/* 
 * Name:  |?FUNCTION_NAME|
 * Description:  
 */
int<CURSOR>
|FUNCTION_NAME|( )
{
<SPLIT>	return 0;
}
== Idioms.function-static == map:isf, shortcut:t  ==
/* 
 * Name:  |?FUNCTION_NAME|
 * Description:  
 */ 
static int<CURSOR>
|FUNCTION_NAME|( )
{
<SPLIT>	return 0;
}
== Idioms.main == map:im, shortcut:m  ==
#include	<stdlib.h>

/* 
 * Name:  main
 * Description:  
 */
int
main ( int argc, char *argv[] )
{
	<CURSOR>
<SPLIT>	return 0;
}
== Idioms.enum == map:ie, shortcut:e  ==
enum |?ENUM_NAME| {<CURSOR>
<SPLIT>};	
== Idioms.struct == map:is, shortcut:s  ==
struct |?STRUCT_NAME| {<CURSOR>
<SPLIT>};
== Idioms.union == map:iu, shortcut:u  ==
union |?UNION_NAME| {<CURSOR>
<SPLIT>};
== Idioms.scanf == map:isc, shortcut:s, insert  ==
scanf ( "<CURSOR>", & );
== Idioms.printf == map:ipr, shortcut:p, insert  ==
printf ( "<CURSOR>\n" );
== Idioms.calloc == map:ica, shortcut:c  ==
|?POINTER|	= calloc ( (size_t)(<CURSOR><+COUNT+>), sizeof(<+TYPE+>) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory allocation failed\n" );
	exit (EXIT_FAILURE);
}

free ( |POINTER| );
|POINTER|	= NULL;

== Idioms.malloc == map:ima, shortcut:m  ==
|?POINTER|	= malloc ( sizeof(<CURSOR><+TYPE+>) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory allocation failed\n" );
	exit (EXIT_FAILURE);
}

free ( |POINTER| );
|POINTER|	= NULL;

== Idioms.realloc == map:ire, shortcut:r  ==
|?POINTER|	= realloc ( |POINTER|, sizeof(<CURSOR><+TYPE+>) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory reallocation failed\n" );
	exit (EXIT_FAILURE);
}

== Idioms.sizeof == map:isi, shortcut:s, insert  ==
sizeof(<CURSOR><SPLIT>)
== Idioms.assert == map:ias, shortcut:a, insert  ==
assert( <CURSOR><SPLIT> );
== Idioms.open-input-file == map:ii, shortcut:i  ==
FILE	*|?FILEPOINTER|;
char	*|FILEPOINTER|_file_name = "<CURSOR>";

|FILEPOINTER|	= fopen( |FILEPOINTER|_file_name, "r" );
if ( |FILEPOINTER| == NULL ) 
{
	fprintf ( stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (0);
}
<SPLIT>{-continue_here-}
if( fclose(|FILEPOINTER|) == EOF ) {			// close input file
	fprintf ( stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}

== Idioms.open-output-file == map:io, shortcut:o  ==
FILE	*|?FILEPOINTER|;										// output-file pointer
char	*|FILEPOINTER|_file_name = "<CURSOR>";		// output-file name

|FILEPOINTER|	= fopen( |FILEPOINTER|_file_name, "w" );
if ( |FILEPOINTER| == NULL ) {
	fprintf ( stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}
<SPLIT>{-continue_here-}
if( fclose(|FILEPOINTER|) == EOF ) {			// close output file
	fprintf ( stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}

== Idioms.fprintf == map:ifpr, shortcut:f, insert  ==
fprintf ( |?FILEPOINTER|, "<CURSOR>\n",  );
== Idioms.fscanf == map:ifsc, shortcut:f, insert  ==
fscanf ( |?FILEPOINTER|, "<CURSOR>", & );

