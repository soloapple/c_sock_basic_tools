== Idioms.function == map:if, shortcut:f  ==
/* ----------------------- FUNCTION ----------------------------
 *         Name:  |?FUNCTION_NAME|
 *  Description:  
 * -------------------------------------------------------------*/
int<CURSOR>
|FUNCTION_NAME| ( )
{
<SPLIT>	return 0;
}		
== Idioms.function-static == map:isf, shortcut:t  ==
 
/* ----------------------- FUNCTION ----------------------------
 *         Name:  |?FUNCTION_NAME|
 *  Description:  
 * -------------------------------------------------------------*/
static int<CURSOR>
|FUNCTION_NAME| ( )
{
<SPLIT>	return 0;
}		
== Idioms.main == map:im, shortcut:m  ==
#include <stdlib.h>
#include <stdio.h>

int
main ( int argc, char *argv[] )
{
	<CURSOR>
<SPLIT>	return 0;
}				
== Idioms.thread == map:ith, shortcut:h  ==
void *
thread_function( void *args )
{
	return NULL;
}	

void 
create_thread(void*(*thread_function)(void*))
{
	pthread_t pid;
	int ret = pthread_create(&pid, NULL, thread_function, (void*)args)	
	if (ret != 0)
		return -1;

	pthread_detach(&pid);
}
== Idioms.enum == map:ie, shortcut:e  ==
typedef enum {
	<CURSOR>
<SPLIT>} |?ENUM_NAME|;				

== Idioms.struct == map:is, shortcut:s  ==
typedef struct |?STRUCT_NAME| {
	<CURSOR>
<SPLIT>} |?STRUCT_NAME|_t;			

== Idioms.union == map:iu, shortcut:u  ==
typedef union {
	<CURSOR>
<SPLIT>} |?UNION_NAME|;		

== Idioms.scanf == map:isc, shortcut:s, insert  ==
scanf ( "<CURSOR>", & );
== Idioms.printf == map:ipr, shortcut:p, insert  ==
printf ( "<CURSOR>\n" );
== Idioms.calloc == map:ica, shortcut:c  ==
|?POINTER|	= calloc ( (size_t)(<CURSOR>{+COUNT+}), sizeof({+TYPE+}) );
if ( |POINTER| == NULL ) 
{
	fprintf ( stderr, "\ndynamic memory allocation failed\n" );
	exit (-1);
}

if ( |POINTER| )
{
	free ( |POINTER| );
	|POINTER| = NULL;
}
== Idioms.malloc == map:ima, shortcut:m  ==
|?POINTER|	= malloc ( sizeof(<CURSOR>{+TYPE+}) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory allocation failed\n" );
	exit (-1);
}

free ( |POINTER| );
|POINTER|	= NULL;
== Idioms.realloc == map:ire, shortcut:r  ==
|?POINTER|	= realloc ( |POINTER|, sizeof(<CURSOR>{+TYPE+}) );
if ( |POINTER| == NULL ) {
	fprintf ( stderr, "\ndynamic memory reallocation failed\n" );
	exit (-1);
}
== Idioms.sizeof == map:isi, shortcut:s, insert  ==
sizeof(<CURSOR><SPLIT>)
== Idioms.assert == map:ias, shortcut:a, insert  ==
assert( <CURSOR><SPLIT> );
== Idioms.open-input-file == map:ii, shortcut:i  ==
FILE	*|?FILEPOINTER|;							
char	*|FILEPOINTER|_file_name = "<CURSOR>";	

|FILEPOINTER|	= fopen( |FILEPOINTER|_file_name, "r" );
if ( |FILEPOINTER| == NULL ) {
	fprintf ( stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (-1);
}
<SPLIT>{-continue_here-}
if( fclose(|FILEPOINTER|) == EOF ) 
{			
	fprintf ( stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (-1);
}
== Idioms.open-output-file == map:io, shortcut:o  ==
FILE	*|?FILEPOINTER|;					
char	*|FILEPOINTER|_file_name = "<CURSOR>";

|FILEPOINTER|	= fopen( |FILEPOINTER|_file_name, "w" );
if ( |FILEPOINTER| == NULL ) 
{
	fprintf ( stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (-1);
}
<SPLIT>{-continue_here-}
if( fclose(|FILEPOINTER|) == EOF ) 
{			
	fprintf ( stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (-1);
}
== Idioms.fprintf == map:ifpr, shortcut:f, insert  ==
fprintf ( |?FILEPOINTER|, "<CURSOR>\n",  );
== Idioms.fscanf == map:ifsc, shortcut:f, insert  ==
fscanf ( |?FILEPOINTER|, "<CURSOR>", & );
