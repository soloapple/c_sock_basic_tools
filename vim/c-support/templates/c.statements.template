== Statements.do while == map:sdw, shortcut:d  ==
do 
{
<SPLIT>
} while (<CURSOR>);				
== Statements.for block == map:sfo, shortcut:r  ==
for ( |INIT|<CURSOR>;; ) 
{
<SPLIT>
}
== Statements.if block == map:sif, shortcut:f  ==
if ( <CURSOR> ) 
{
<SPLIT><-IF_PART->
}
== Statements.if block else == map:sife, shortcut:l  ==
if ( <CURSOR> ) 
{
<SPLIT><-IF_PART->
}
else 
{
<SPLIT><-ELSE_PART->
}
== Statements.erro == map:see, shortcut:e  ==
LOGE("<CURSOR>\n");
== Statements.warn == map:sww, shortcut:w  ==
LOGW("<CURSOR>\n");
== Statements.debg == map:sdd, shortcut:d  ==
LOGD("<CURSOR>\n");
== Statements.notc == map:snn, shortcut:n  ==
LOGN("<CURSOR>\n");
== Statements.head == map:shh, shortcut:h  ==
int ret = FAILURE;

if ( !<CURSOR> ) {
	LOGW("NULL\n");
	goto _E1;
}
== Statements.goto == map:sgg, shortcut:g  ==
	goto _S0;
_E1:
	return ret;
_S0:
	return SUCCESS;
== Statements.while block == map:swh, shortcut:h  ==
while ( <CURSOR> ) 
{
	<SPLIT>
}
== Statements.switch == map:ss, shortcut:s  ==
switch ( <CURSOR> ) 
{
	case :	
		<SPLIT>break;

	default:	
		break;
}
== Statements.case == map:sc, shortcut:c  ==
case <CURSOR>:	
	break;
== Statements.block == map:sb, shortcut:b  ==
{
<CURSOR><SPLIT>
}
