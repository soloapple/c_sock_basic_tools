== Statements.do while == map:sd, shortcut:d  ==
do {
<SPLIT>} while (<CURSOR>);				/* -----  end do-while  ----- */
== Statements.for == map:sf, shortcut:o  ==
for ( <CURSOR>; ; )
ยง
ยง The names INIT, CONDITION, INCREMENT, and 'for block' are used by the main
ยง plugin plugin/c.vim . Please do not change.
ยง
== Statements.for block == map:sfo, shortcut:r  ==
|DefaultMacro( 'CONDITION', '{+CONDITION+}' )|
|DefaultMacro( 'INCREMENT', '{+INCREMENT+}' )|
for ( |INIT|<CURSOR>; |CONDITION|; |INCREMENT| ) {
<SPLIT>}
== Statements.range-based for == map:sfr, shortcut:a  ==
for (<CURSOR>: <-EXPRESSION->){
<SPLIT>}
== Statements.if block == map:sif, shortcut:f  ==
if ( <CURSOR> ) {
<SPLIT><-IF_PART->
}
== Statements.if else == map:sie, shortcut:e  ==
if (<CURSOR>)
<SPLIT>else
== Statements.if block else == map:sife, shortcut:l  ==
if (<CURSOR>) {
<SPLIT><-IF_PART->
}
else {
<-ELSE_PART->
}
== Statements.erro == map:see, shortcut:e  ==
LOGE("<CURSOR>\n");
== Statements.warn == map:sww, shortcut:w  ==
LOGW("<CURSOR>\n");
== Statements.wwww == map:swww, shortcut:w  ==
LOGW("<CURSOR>, ret: %s\n", strcode(ret));
== Statements.debg == map:sdd, shortcut:d  ==
LOGD("<CURSOR>\n");
== Statements.notc == map:snn, shortcut:n  ==
LOGN("<CURSOR>\n");
== Statements.head == map:shh, shortcut:h  ==
int ret = FAILURE;

if ( !<CURSOR> ) {
	LOGW("NULL\n");
	goto _E1;
}
== Statements.goto == map:sgg, shortcut:g  ==
	goto _S0;
_E1:
	return ret;
_S0:
	return SUCCESS;
== Statements.while block == map:swh, shortcut:h  ==
while ( <CURSOR> ) {
<SPLIT>}
== Statements.switch == map:ss, shortcut:s  ==
switch ( <CURSOR> ) {
	case <-LABEL->:	
		<SPLIT>break;

	case <-LABEL->:	
		break;

	case <-LABEL->:	
		break;

	default:	
		break;
}
== Statements.case == map:sc, shortcut:c  ==
case <CURSOR>:	
break;
== Statements.block == map:sb, shortcut:b  ==
{
<CURSOR><SPLIT>
}
